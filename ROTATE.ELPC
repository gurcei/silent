' rotate screen contents
#output "rotate"
' 4.0800 = screen pointer
' 4.4000 = 96x96 clrbox canvas (9216 bytes)
' 4.6400 = free

.defines
'-------
#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3

#declare HOTREG_7 = $d05d
#declare SCRNPTRLSB = $d060
#declare SCRNPTRBNK = $d062

#declare t, x, y, colr, ang, xinc, yinc, tx, ty, txinc, tyinc
#declare y1add
#declare xfrac, yfrac
#declare box_ang, cx, cy, hyp
#define PI = 3.1415926535
#declare pl_rad, pl_ang, pl_dir, pl_clr
#declare a$
#declare state

.main
'----
  gosub init
  gosub dummy_content
.mn_loop
  gosub rotate_logic
  gosub draw_content
  goto mn_loop


.init
'----
  ^^bload "asmrotate",b0
  print chr$(27);"5";chr$(147);
  ang = 2*PI + .1

  state = 0
  pl_rad = 0
  pl_ang = 0
  pl_dir = 0
  pl_clr = 0

  ' clear 80x50 chars and colour ram
  edma 3, 4000, 160, $40800
  edma 3, 4000, 6, $ff80000
  ' for idx=0 to 3999:poke $44000+idx,160:poke $ff80000+idx,6:next idx

  return


.dummy_content
'-------------
  edma OP_FILL, 96*96, 0, $44000

  'poke $44000 + 48*96, 1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6

  'for t = 0 to 50
  '  colr = int(rnd(1)*16)
  '  x = int(rnd(1)*96)
  '  y = int(rnd(1)*96)
  '  poke $44000 + x + y * 96, colr
  'next t

  'for y = 0 to 96
  '  for x = 0 to 95
  '    poke $44000 + x + y * 96, mod(y, 16)
  '  next x
  'next y

  return


.rotate_logic
'------------
  ang = ang - .1
  if ang < 0 then ang = ang + (2 * PI)
  hyp = sqr(25*25+40*40) * 65536
  xinc = cos(ang) * 65536
  yinc = sin(ang) * 65536
  txinc = cos(ang+PI/2) * 65536
  tyinc = sin(ang+PI/2) * 65536
  box_ang = atn(-25/-40)+ PI +ang
  if box_ang < 0 then box_ang = box_ang + (2 * PI)
  tx = hyp * cos(box_ang) + 48 * 65536
  ty = hyp * sin(box_ang) + 48 * 65536
  cx = tx
  cy = ty
  xfrac = 0
  yfrac = 0
  y1add = 0
  return


.draw_content
'------------
  gosub plot_iteration
  gosub plot_iteration
  gosub asm_rotation
  ' gosub basic_rotation

  'cursor 0,0:print chr$(27);"q tx=";tx;", ty=";ty;
  'cursor 0,1:print chr$(27);"q ang=";ang;", hyp=";hyp;
  'cursor 0,2:print chr$(27);"q xinc=";xinc;", yinc=";yinc;
  'cursor 0,3:print chr$(27);"q txinc=";txinc;", tyinc=";tyinc;
  'get key a$

  return


.plot_iteration
'--------------
  x = 48 + cos(pl_ang) * pl_rad
  y = 48 + sin(pl_ang) * pl_rad

  poke $44000 + x + int(y) * 96, pl_clr + 64

  pl_ang = pl_ang + .025
  if pl_ang > 2 * PI then pl_ang = pl_ang - 2 * PI

  pl_rad = pl_rad + .05
  if pl_rad > 30 then begin
    pl_rad=0
    pl_clr = pl_clr + 1
    if pl_clr = 16 then state = state + 1
    pl_ang = .3926 * pl_clr
  bend

  return


.asm_rotation
'------------
  ' ASSEMBLY version
  if xinc < 0 then xinc = xinc + 4294967296
  if yinc < 0 then yinc = yinc + 4294967296
  if txinc < 0 then txinc = txinc + 4294967296
  if tyinc < 0 then tyinc = tyinc + 4294967296

  wpoke $1a00, mod(tx,65536)
  wpoke $1a02, tx/65536

  wpoke $1a04, mod(ty, 65536)
  wpoke $1a06, ty/65536

  wpoke $1a08, mod(xinc,65536)
  wpoke $1a0a, xinc/65536

  wpoke $1a0c, mod(yinc, 65536)
  wpoke $1a0e, yinc/65536

  wpoke $1a10, mod(txinc, 65536)
  wpoke $1a12, txinc/65536

  wpoke $1a14, mod(tyinc, 65536)
  wpoke $1a16, tyinc/65536

  bank 0:sys $1800:bank 128

  return


.basic_rotation
'--------------
  ' BASIC version
  for y = 0 to 49
    cx = tx
    cy = ty
    for x = 0 to 79
      poke $ff80000 + x + y1add, peek($44000 + cx/65536 + int(cy/65536) * 96)
      cx = cx + xinc
      cy = cy + yinc
    next x
    tx = tx + txinc
    ty = ty + tyinc
    y1add = y1add + 80
  next y

  get key a$

  return

         
ÿ