#OUTPUT "STARFIELD"' ÂÁÎË4 ÍEMORY USAGE' ------------------' 4.0000 ÄÍÁ-ÌÉÓÔ' 4.0020 VAR INTERFACE TO ASSEMBLY'        0020: PTR TO DEFAULT¯RED&'        0022: PTR TO DEFAULT¯GREEN&'        0024: PTR TO DEFAULT¯BLUE&'        0026: PTR TO CURR¯RED&'        0028: PTR TO CURR¯GREEN&'        002A: PTR TO CURR¯BLUE&'        002C: PTR TO DATA¯ADDR%'        002E: PTR TO CDATA¯ADDR%'        0030: PTR TO SCRADDR%'        0032: PTR TO CLRADDR%'        0034: PTR TO INC%'        0036: PTR TO STARX%'        0038: PTR TO STARVX%' 4.0800 ÓÃÒÅÅÎ ÍÅÍÏÒÙ' 4.2000 ÐÅÔÓÃÉÉ ÇÒÁÐÈÉÃÓ FOR ÂÁÓ LOGO' ÂÁÎË5 ÍEMORY USAGE' ------------------' 5.0000 SCREEN BUFFER FOR DRAW¯PETSCII¯FRAME' 5.1000 COLOR RAM BUFFER FOR DRAW¯PETSCII¯FRAME' 5.2000 SCREEN BUFFER2 FOR 'ANATHEMA' LAYER' 5.4000 COLOR RAM BUFFER2 FOR 'ANATHEMA' LAYER' 5.3000 SCREEN BUFFER3 FOR 'THE SILENT ENIGMA' LAYER' 5.4000 COLOR RAM BUFFER3 FOR 'THE SILENT ENIGMA' LAYER'--------.DECLARES'--------#DECLARE STARX%(20), STARY(20), STARVX%(20)#DECLARE K#DECLARE FNAME$, VAL&#DECLARE LDATA&(2, 12288), DIDX%(2)=0, PIDX%(2)=0, FIDX%=0#DECLARE GROUP¯FLAG&, VAL&, REV¯FLAG&(2) = 0#DECLARE OFFS(2), VER(2)#DECLARE LASTFLAG, LAST¯GROUP¯IDX#DECLARE OLDX, OLDY, OLDOFFS(2), X, Y, A$, XX, YY, DEBUG, Z$#DECLARE CHR#DECLARE SRC¯ADDR, DEST¯ADDR, LENGTH, TRANSP#DECLARE LOC, PTR, M, TSTART, ADDR'-------.DEFINES'-------#DEFINE ÏÐ¯ÃÏÐÙ = 0#DEFINE ÏÐ¯ÍÉØ  = 1#DEFINE ÏÐ¯Ó×ÁÐ = 2#DEFINE ÏÐ¯ÆÉÌÌ = 3#DEFINE ÄÓÔ¯ÄÅÃ = 32#DEFINE ÓÒÃ¯ÄÅÃ = 16'----.MAIN'----  GOSUB INIT.MAIN¯LOOP  TSTART = TI  M = M + 1  GOSUB DRAW¯STARFIELD  IF M >= 70 AND M < 800 THEN BEGIN    FIDX%=0    GOSUB PLAY¯DATA¯ITER  ' LINE DATA  BEND  GOSUB PAGE¯FLIP  IF M > 850 AND M < 950 THEN FIDX%=0:GOSUB SCROLL¯CANVAS¯RIGHT  IF M > 300 THEN BEGIN    FIDX%=1    GOSUB PLAY¯DATA¯ITER    IF M > 2630 THEN GOSUB SCROLL¯CANVAS¯RIGHT  BEND  GOSUB ITER¯STARFIELD  ' CURSOR 0,0:PRINT M  DO WHILE (TI-TSTART < .03)  LOOP  GOTO MAIN¯LOOP  END'----.INIT'----  M = 0  BANK 0:BLOAD "ASMHELPER":BANK 128  ' SWITCH BACK TO UPPER-CASE  POKE $D018, PEEK($D018) AND $FD  PRINT CHR$(27);"5";  FOR K = 0 TO 20    STARX%(K) = INT(RND(1)*80)*256    STARY(K) = INT(RND(1)*50)    STARVX%(K) = (RND(1)*4 + .5)*256  NEXT K  ' CLEAR THE OFFSCREEN BUFFER  EDMA 3, $FA0, 32, $50000  EDMA 3, $FA0, 0, $51000  EDMA 3, $FA0, 32, $52000  EDMA 3, $FA0, 0, $53000  EDMA 3, $FA0, 32, $54000  EDMA 3, $FA0, 0, $55000  FNAME$ = "ANA.LN"  FIDX% = 0  VER(FIDX%) = 1  GOSUB LOAD¯LINE¯FILE  FNAME$ = "SILENT.L"  FIDX% = 1  VER(FIDX%) = 2  GOSUB LOAD¯LINE¯FILE  POKE $40000, $81 ' OPT = DEST ADDR ÍÂ SELECTOR  POKE $40001, $00 ' DEFAULT TO 1ST MEGABYTE  POKE $40002, $07 ' OPT = ENABLE TRANSPARENCY  POKE $40003, $86 ' OPT = SET TRANSPARENCY  POKE $40004, $20 ' TRANSPARENCY VALUE  POKE $40005, $00 ' END OF OPTIONS  POKE $40006, $00 ' ÃÍÄ LSB = ÃÏÐÙ  WPOKE $40007, $0000 ' LENGTH  WPOKE $40009, $1000 ' SOURCE ADDR  POKE $4000B, $05    ' SOURCE BANK  WPOKE $4000C, $1000 ' DEST ADDR  POKE $4000E, $05    ' DEST BANK  POKE $4000F, $00    ' ÃÍÄ MSB (IGNORE)  WPOKE $40010, $0000 ' MODULO (IGNORE)  ' INIT VAR INTERFACE TO ASSEMBLY  LOC = $40036  PTR = POINTER(STARX%(0))  GOSUB STORE¯PTR  PTR = POINTER(STARVX%(0))  GOSUB STORE¯PTR  RETURN'---------.STORE¯PTR'---------  WPOKE LOC, PTR  LOC = LOC + 2  RETURN'--------------.LOAD¯LINE¯FILE'-------------- ' (FNAME$)  IF FNAME$ = "" THEN RETURN  GOSUB LINE¯FILE¯INIT  DOPEN #2,(FNAME$),R,U8  DO    GET #2, VAL&    IF ST THEN EXIT    LDATA&(FIDX%, DIDX%(FIDX%)) = VAL&    DIDX%(FIDX%) = DIDX%(FIDX%) + 1  LOOP  DCLOSE #2  GOSUB PLAY¯DATA¯INIT  RETURN'--------------.LINE¯FILE¯INIT'--------------  OLDX = -1 : OLDY = -1 : OLDOFFS(FIDX%) = 0  DIDX%(FIDX%) = 0  GROUP¯FLAG& = 0 : REV¯FLAG&(FIDX%) = 0  OFFS(FIDX%) = 0  RETURN'--------------.DRAW¯STARFIELD'--------------  FOR K = 0 TO 20    POKE $50000 + STARX%(K)/256 + STARY(K) * 80, 46  ' DOT  NEXT K  RETURN'--------------.ITER¯STARFIELD'--------------  BANK 0:SYS $7E0F:BANK 128  'FOR K = 0 TO 20  '  STARX(K) = MOD( (STARX(K)-STARVX(K)) + 80, 80)  'NEXT K  'CURSOR 0,0  'FOR K = 0 TO 20  '  PRINT INT(STARX%(K)/256), STARY(K)  'NEXT K  'GET KEY A$  RETURN'---------.PAGE¯FLIP'---------  SRC¯ADDR = $54000  DEST¯ADDR = $50000  LENGTH = 4000  TRANSP = 32  GOSUB TRANSPARENT¯DMA  SRC¯ADDR = $55000  DEST¯ADDR = $51000  LENGTH = 4000  TRANSP = 0  GOSUB TRANSPARENT¯DMA  SRC¯ADDR = $52000  DEST¯ADDR = $50000  LENGTH = 4000  TRANSP = 32  GOSUB TRANSPARENT¯DMA  SRC¯ADDR = $53000  DEST¯ADDR = $51000  LENGTH = 4000  TRANSP = 0  GOSUB TRANSPARENT¯DMA  EDMA 0, $FA0, $50000, $40800  EDMA 0, $FA0, $51000, $FF80000  ' CLEAR THE OFFSCREEN BUFFER  EDMA 3, $FA0, 32, $50000  EDMA 3, $FA0, 1, $51000  RETURN'--------------.PLAY¯DATA¯INIT'--------------  PRINT "“";  OFFS(FIDX%)=0  PIDX%(FIDX%) = 0  IF LASTFLAG = 1 THEN PIDX%(FIDX%) = LAST¯GROUP¯IDX : LASTFLAG = 0  RETURN'--------------.PLAY¯DATA¯ITER'--------------  IF PIDX%(FIDX%) < DIDX%(FIDX%) THEN BEGIN    VAL& = LDATA&(FIDX%, PIDX%(FIDX%))    PIDX%(FIDX%) = PIDX%(FIDX%) + 1    IF VER(FIDX%)=3 AND VAL& = $FF THEN BEGIN      IF PIDX%(FIDX%) > LAST¯GROUP¯IDX THEN LAST¯GROUP¯IDX = PIDX%(FIDX%)      GOTO PD¯ENDLOOP    BEND    X = VAL& AND $7F    IF VER(FIDX%)=2 THEN BEGIN      X = VAL&      VAL& = LDATA&(FIDX%, PIDX%(FIDX%))      PIDX%(FIDX%) = PIDX%(FIDX%) + 1      X = X + (VAL& AND $7F) * 256    BEND    IF VAL& AND $80 THEN REV¯FLAG&(FIDX%) = 1: ELSE REV¯FLAG&(FIDX%) = 0    Y = LDATA&(FIDX%, PIDX%(FIDX%))    PIDX%(FIDX%) = PIDX%(FIDX%) + 1    A$ = CHR$(LDATA&(FIDX%, PIDX%(FIDX%)))    PIDX%(FIDX%) = PIDX%(FIDX%) + 1    IF VER(FIDX%)=2 THEN BEGIN      IF X-OFFS(FIDX%) > 78 THEN BEGIN        GOSUB SCROLL¯CANVAS¯RIGHT        PIDX%(FIDX%) = PIDX%(FIDX%) - 4        RETURN        ' PRINT "";CHR$(27);"QOFFS=";OFFS(FIDX%);      BEND    BEND    XX = X-OFFS(FIDX%) : YY = Y: CURSOR XX, YY : GOSUB DRAW¯CHAR    DEBUG = 0    IF DEBUG=1 THEN BEGIN      PRINT "";CHR$(27);"Q X,Y,PIDX,A$,OFFS=";X;Y;PIDX%(FIDX%),ASC(A$),OFFS(FIDX%)      GET KEY A$    BEND.PD¯ENDLOOP  BEND  X = X-OFFS(FIDX%)  RETURN'---------.DRAW¯CHAR'---------  ' POKE $40800 + X + Y*80, ASC(A$)  ' POKE $FF80000 + X + Y*80, RCOLOR(1)    CHR = ASC(A$)  GOSUB PETSCII¯TO¯SCREENCODE  IF REV¯FLAG&(FIDX%) = 1 THEN CHR = CHR + 128  IF VER(FIDX%) = 1 THEN BEGIN    POKE $52000 + XX + YY*80, CHR    POKE $53000 + XX + YY*80, 1  BEND  IF VER(FIDX%) = 2 THEN BEGIN    POKE $54000 + XX + YY*80, CHR    POKE $55000 + XX + YY*80, 2  BEND  RETURN'---------------------.PETSCII¯TO¯SCREENCODE'---------------------  ' ÂASED ON THE TABLE HERE:  ' HTTPS://STA.C64.ORG/CBM64PETTOSCR.HTML  ' - SEEMS LIKE É NEEDED TO DO A REPAIR TO IT ON THE $A0-->$BF RANGE  IF CHR>=$00 AND CHR<=$1F THEN CHR=CHR OR $80:RETURN  IF CHR>=$20 AND CHR<=$3F THEN RETURN  IF CHR>=$40 AND CHR<=$5F THEN CHR=CHR AND $BF:RETURN  IF CHR>=$60 AND CHR<=$7F THEN CHR=CHR AND $DF:RETURN  IF CHR>=$80 AND CHR<=$9F THEN CHR=CHR OR $40:RETURN  IF CHR>=$A0 AND CHR<=$BF THEN CHR=(CHR AND $7F) OR $40:RETURN ' $BF:RETURN  IF CHR>=$C0 AND CHR<=$FE THEN CHR=CHR AND $7F:RETURN  RETURN'---------------.TRANSPARENT¯DMA'---------------  WPOKE $40009, SRC¯ADDR  WPOKE $4000C, DEST¯ADDR  WPOKE $40007, LENGTH  POKE  $40004, TRANSP  POKE $D702, 4 ' DMA LIST IN BANK 4  POKE $D701, $00 ' DMA LIST MSB  POKE $D705, $00 ' DMA LIST LSB  RETURN'------------------.SCROLL¯CANVAS¯LEFT'------------------  FOR YY = 0 TO 49    EDMA ÏÐ¯ÃÏÐÙ+ÄÓÔ¯ÄÅÃ+ÓÒÃ¯ÄÅÃ, _           79, $52000 + YY*80 + 78, $52000 + YY*80 + 79    POKE $52000 + YY*80, 32   NEXT YY  RETURN'-------------------.SCROLL¯CANVAS¯RIGHT'-------------------  OFFS(FIDX%) = OFFS(FIDX%) + 1  IF FIDX% = 0 THEN ADDR = $52000  IF FIDX% = 1 THEN ADDR = $54000  FOR YY = 0 TO 49    EDMA ÏÐ¯ÃÏÐÙ, 79, ADDR+1 + YY*80, ADDR + YY*80    POKE ADDR + 79 + YY*80, 32     EDMA ÏÐ¯ÃÏÐÙ, 79, ADDR+$1001 + YY*80, ADDR+$1000 + YY*80    POKE ADDR+$1000 + 79 + YY*80, 0  NEXT YY                  RETURN