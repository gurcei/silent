#output "line"

' Keys:
' ----
'  Up/Down/Left/Right = Move cursor position
'  CTRL+9/0 = Set reverse on/off
'  F1 = load file
'  F3 = save file
'  F5 = play data
'  F7 = toggle group flag
'       - adds $ff (start) or $fe (stop) to data stream
'         the intent is to draw such groups in one hit
'         (rather than char by char)
'  F9 = toggle between version 1 or 2 of file format (default ver2)
'  ALT+Left/Right = scroll canvas left/right


.declares
'--------
#declare a$, loc
#declare x=0, y=0, xx, yy
#declare t0=0
#declare modified%=0
#declare oldx, oldy, oldoffs
#declare fname$, alt_key

#declare ldata&(12288), didx%=0, pidx%=0
#declare group_flag&, val&, rev_flag& = 0
#declare offs, ver=2

.defines
'-------
#define OP_COPY = 0
#define OP_MIX  = 1
#define OP_SWAP = 2
#define OP_FILL = 3

#define DST_DEC = 32
#define SRC_DEC = 16

.keys
'----
#define KEY_UP = "{x91}"
#define KEY_DOWN = "{x11}"
#define KEY_LEFT = "{x9D}"
#define KEY_RIGHT = "{x1D}"
#define KEY_SPACE = " "
#define KEY_DEL = "{x14}"
#define KEY_CTRL_W = "{x17}"
#define KEY_CTRL_U = "{x15}"
#define KEY_MEGA_Q = "«"
#define KEY_F1 = "{x85}"
#define KEY_F3 = "{x86}"
#define KEY_F4 = "{x8A}"
#define KEY_F5 = "{x87}"
#define KEY_F7 = "{x88}"
#define KEY_F8 = "{x8C}"
#define KEY_F9 = chr$(16)
#define KEY_RETURN = chr$(13)
#define KEY_ESCAPE = chr$(27)
#define KEY_SHIFT_RETURN = chr$(141)
#define KEY_SHIFT_PLUS = "Û"
#define KEY_SHIFT_MINUS = "Ý"
#define KEY_REV_ON = "{x12}"
#define KEY_REV_OFF = "{x92}"
#define KEY_TAB = chr$(9)
#define KEY_HOME = "{x13}"
#define KEY_CLR  = "{x93}"
#define KEY_LOWERCASE = chr$(14)
#define KEY_UPPERCASE = chr$(142)
#define KEY_BEEP = chr$(7)
#define KEY_INST = "{x94}"
#define KEY_DEL  = "{x14}"
#define KEY_MEGA_K = "{xA1}"
#define KEY_MEGA_J = "µ"
#define KEY_MEGA_H = "´"
#define KEY_MEGA_L = "¶"

gosub init

.main
gosub check_input
gosub show_cursor
goto main

'----
.init
'----
  ' switch back to upper-case
  ' poke $d018, peek($d018) and $fd
  oldx = -1 : oldy = -1 : oldoffs = -1
  didx% = 0
  group_flag& = 0 : rev_flag& = 0
  print "{x93}";
  poke $d020, 11
  poke $d021, 0
  offs = 0
  return


'-----------
.check_input
'-----------
  get a$
  gosub check_alt_key_inputs

  if a$<>"" then gosub draw_info
  if a$=KEY_LEFT and x>0 then gosub restore_char : x=x-1 : return
  if a$=KEY_RIGHT and x<78 then gosub restore_char : x=x+1 : return
  if a$=KEY_UP and y>0 then gosub restore_char : y=y-1 : return          
  if a$=KEY_DOWN and y<49 then gosub restore_char : y=y+1 : return
  if a$=KEY_F1 then gosub load_file : return
  if a$=KEY_F3 then gosub save_file : return
  if a$=KEY_F7 then gosub set_group_flag : return
  if a$=KEY_F9 then gosub toggle_version
  if a$=KEY_F5 then gosub play_data : return
  if a$=KEY_REV_ON then rev_flag& = 1 : return
  if a$=KEY_REV_OFF then rev_flag& = 0 : return
  if a$<>"" then begin
    cursor x, y
    gosub restore_char
    gosub chk_rev
    xx = x : yy = y
    gosub draw_char
    gosub save_char
  bend
  return

'--------------
.toggle_version
'--------------
  if ver=2 then ver=1:else ver = 2
  print "{x13}";chr$(27);"qversion";ver
  a$=""
  return


'---------
.draw_char
'---------
  ' poke $40800 + x + y*80, asc(a$)
  ' poke $ff80000 + x + y*80, rcolor(1)
  print a$;
  return

'--------------------
.check_alt_key_inputs
'--------------------
  alt_key = peek($d611) and 16

  if alt_key = 0 then return

  if a$=KEY_LEFT then gosub scroll_canvas_left
  if a$=KEY_RIGHT then gosub scroll_canvas_right

  a$=""
  return


'---------
.draw_info
'---------
  print "{x13}";chr$(27);"qfname=";fname$;"  didx%=";didx%;
  return


'-------
.chk_rev
'-------
  if rev_flag& = 1 then print "{x12}";:else print "{x92}";
  return

'---------
.play_data
'---------
  print "{x93}";

  offs=0
  pidx% = 0
  do while pidx% < didx%
    val& = ldata&(pidx%) : pidx% = pidx% + 1
    'if val& = $ff then group_flag& = 1 : goto pd_endloop
    'if val& = $fe then group_flag& = 0 : sleep .02 : goto pd_endloop
    x = val& and $7f
    if ver=2 then begin
      x = val&
      val& = ldata&(pidx%)
      pidx% = pidx% + 1
      x = x + (val& and $7f) * 256
    bend

    if val& and $80 then print "{x12}"; : else print "{x92}";
    y = ldata&(pidx%) : pidx% = pidx% + 1
    a$ = chr$(ldata&(pidx%)) : pidx% = pidx% + 1

    if ver=2 then begin
      do while x-offs > 78
        gosub scroll_canvas_right
      loop
    bend

    xx = x-offs : yy = y: cursor xx, yy : gosub draw_char

      'print "{x13}{x11}";chr$(27);"q x,y,pidx,a$=";x;y;pidx%,asc(a$)
      'get key a$

    if group_flag& = 0 then sleep .02
.pd_endloop
  loop

  x = x-offs
  return

'--------------
.set_group_flag
'--------------
  if group_flag& = 0 then begin
    group_flag& = 1
    ldata&(didx%) = $ff
    poke $d020, $02
  bend:else begin
    group_flag& = 0
    ldata&(didx%) = $fe
    poke $d020, $00
  bend
  didx% = didx% + 1
  return


'---------
.load_file
'---------
  input "load name: ";fname$
  if fname$ = "" then return
  gosub init
  dopen #2,(fname$),r,u8

  do
    get #2, val&
    if st then exit
    ldata&(didx%) = val&
    didx% = didx% + 1
  loop

  dclose #2
  gosub play_data
  return


'---------
.save_file
'---------
  input "save name: ";fname$
  if fname$ = "" then return
  delete (fname$)
  dopen #2,(fname$),w,u8

  for xx = 0 to didx%
    print #2, chr$(ldata&(xx));
  next xx  
  dclose #2
  return


'---------
.save_char
'---------
  if oldx=x and oldy=y and oldoffs=offs and instr("{x90}{x5}{x1C}{x9F}{x1E}{x9E}{x81}{x95}{x96}{x97}{x98}{x99}{x9A}{x9B}{x1}{x4}{x12}{x92}", a$)=0 then begin
    ' replace previous char
    if ver = 2 then begin
      ldata&(didx%-4) = (x+offs) and 255
      ldata&(didx%-3) = (x+offs) / 256 + rev_flag& * $80
    bend:else begin
      ldata&(didx%-3) = x + rev_flag& * $80
    bend
    ldata&(didx%-1) = asc(a$)
  bend:else:begin
    ' write new char
    if ver = 2 then begin
      ldata&(didx%) = (x+offs) and 255
        didx% = didx% + 1
      ldata&(didx%) = (x+offs) / 256 + rev_flag& * $80
        didx% = didx% + 1
    bend:else begin
      ldata&(didx%) = (x+offs) + rev_flag& * $80
        didx% = didx% + 1      
    bend
    ldata&(didx%) = y
      didx% = didx% + 1
    ldata&(didx%) = asc(a$)
      didx% = didx% + 1
    
    oldx=x : oldy=y : oldoffs=offs
  bend

  return

  
'------------  
.restore_char
'------------
  if modified% then begin
    loc = $ff80000 + x + 80 * y
    poke loc, peek(loc) xor 32
    modified% = 0
    t0 = ti
  bend

  return


'-----------
.show_cursor
'-----------
  if ti > t0 then t0 = ti + .5:else return
  loc = $ff80000 + x + 80 * y
  poke loc, peek(loc) xor 32
  modified% = modified% xor 1
  return


'------------------
.scroll_canvas_left
'------------------
  if offs>0 then offs=offs-1:else return
  for yy = 0 to 49
    edma OP_COPY+DST_DEC+SRC_DEC, {x5F}
           79, $40800 + yy*80 + 78, $40800 + yy*80 + 79
    poke $40800 + yy*80, 32 
  next yy
  return


'-------------------
.scroll_canvas_right
'-------------------
  offs=offs+1
  for yy = 0 to 49
    edma OP_COPY, 79, $40801 + yy*80, $40800 + yy*80
    poke $40800 + 79 + yy*80, 32 
  next yy                
  return
ÿ