' silent2.el is just an extension of silent.el
' to work around the max 2000 source line limitations of eleven

.init_rotate
'-----------
  ^^bload "asmrotate",b0

  greet_x = 1

  ang = 2*PI + .1

  gosub load_greets

  pl_rad = 0
  pl_ang = 0
  pl_dir = 0
  pl_clr = 0

  ' clear 96x96 array
  edma OP_FILL, 96*96, 0, $44000

  return


.load_greets
'-----------
  dopen #2,"greets.t",r,u8

  greet_cnt = 0
  gt_ptr = $47000

  do
    line input #2, greet$
    if st then exit

    k = 1

    do while k <= len(greet$)
      chr = asc(mid$(greet$, k, 1))
      gosub petscii_to_screencode

      poke gt_ptr, chr : gt_ptr = gt_ptr + 1
      k = k + 1
    loop

    poke gt_ptr, $ff : gt_ptr = gt_ptr + 1  ' $ff = marker for end of string

    greet_cnt = greet_cnt + 1
  loop

  poke gt_ptr, $00  ' $00 = marker for end of greetings text

  gt_ptr = $47000

  dclose #2
  return


.rotate_logic
'------------
  ang = ang - .1
  if ang < 0 then ang = ang + (2 * PI)
  hyp = sqr(25*25+40*40) * 65536
  xinc = cos(ang) * 65536
  yinc = sin(ang) * 65536
  txinc = cos(ang+PI/2) * 65536
  tyinc = sin(ang+PI/2) * 65536
  box_ang = atn(-25/-40)+ PI +ang
  if box_ang < 0 then box_ang = box_ang + (2 * PI)
  tx = hyp * cos(box_ang) + 48 * 65536
  ty = hyp * sin(box_ang) + 48 * 65536
  cx = tx
  cy = ty
  xfrac = 0
  yfrac = 0
  return


.draw_content
'------------
  gosub plot_iteration

  gosub asm_rotation
  ' gosub basic_rotation

  'cursor 0,0:print chr$(27);"q tx=";tx;", ty=";ty;
  'cursor 0,1:print chr$(27);"q ang=";ang;", hyp=";hyp;
  'cursor 0,2:print chr$(27);"q xinc=";xinc;", yinc=";yinc;
  'cursor 0,3:print chr$(27);"q txinc=";txinc;", tyinc=";tyinc;
  'get key a$

  return


.plot_iteration
'--------------
  for plt_iter = 0 to 6
    x = 48 + cos(pl_ang) * pl_rad
    y = 48 + sin(pl_ang) * pl_rad

    poke $44000 + x + int(y) * 96, pl_clr + 64

    pl_ang = pl_ang + .025
    if pl_ang > 2 * PI then pl_ang = pl_ang - 2 * PI

    pl_rad = pl_rad + .05
    if pl_rad > 30 then begin
      pl_rad=0
      pl_clr = pl_clr + 1
      pl_ang = .3926 * pl_clr
    bend

  next plt_iter

  return


.asm_rotation
'------------
  ' ASSEMBLY version
  if xinc < 0 then xinc = xinc + 4294967296
  if yinc < 0 then yinc = yinc + 4294967296
  if txinc < 0 then txinc = txinc + 4294967296
  if tyinc < 0 then tyinc = tyinc + 4294967296

  wpoke $1a00, mod(tx,65536)
  wpoke $1a02, tx/65536

  wpoke $1a04, mod(ty, 65536)
  wpoke $1a06, ty/65536

  wpoke $1a08, mod(xinc,65536)
  wpoke $1a0a, xinc/65536

  wpoke $1a0c, mod(yinc, 65536)
  wpoke $1a0e, yinc/65536

  wpoke $1a10, mod(txinc, 65536)
  wpoke $1a12, txinc/65536

  wpoke $1a14, mod(tyinc, 65536)
  wpoke $1a16, tyinc/65536

  bank 0:sys $1800:bank 128

  return
ÿ