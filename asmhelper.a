!to "asmhelper.prg", cbm

// DEFINES
// =======
ONEPTR = $29
FOURPTR = $18


// BANK4 VAR INTERFACE
// ===================
DEFAULT_RED = $20
DEFAULT_GREEN = $22
DEFAULT_BLUE = $24
CURR_RED = $26
CURR_GREEN = $28
CURR_BLUE = $2a

MULTINA = $d770
MULTINB = $d774
MULTOUT = $d778


// MACROS
// ======
!macro copy16 .src, .dest {
	lda .src
	sta .dest
	lda .src+1
	sta .dest+1
}

!macro lsr16 .loc {
	clc
	lda .loc+1
	ror
	sta .loc+1
	lda .loc
	ror
	sta .loc
}

!macro lsr16_by .loc, .cnt {
	ldx #.cnt
	cpx #$00
	beq +
-	+lsr16 .loc
	dex
	bne -
+ 
}

!macro set1ptr_from_4ptr .b4offs {
	phz
	ldz #.b4offs
	lda [FOURPTR],z
	sta ONEPTR
	inz
	lda [FOURPTR],z
	sta ONEPTR+1
	plz
}

!macro add16 .in1, .in2, .out {
	clc
	lda .in1
	adc .in2
	sta .out
	lda .in1+1
	adc .in2+1
	sta .out+1
	clc
}

!macro subtract16 .in1, .in2, .out {
	sec
	lda .in1
	sbc .in2
	sta .out
	lda .in1+1
	sbc .in2+1
	sta .out+1
	clc
}

!macro multiply16 .in1, .in2, .out {
	phz
	ldz #$00
	ldy #$00
	ldx .in1+1
	lda .in1
	stq MULTINA

	ldx .in2+1
	lda .in2
	stq MULTINB

	ldq MULTOUT
	stx .out
	sty .out+1
	plz
}

!macro fade_clr1_to_white_step .bk4ptr, .palette_loc {
	// flip_var = default_red&(k)
	+set1ptr_from_4ptr .bk4ptr
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr1 = flip_var
	sta clr1+1
	lda #$00
	sta clr1
	
	// clr2 = $f0   ' (white)
	sta clr2
	lda #$f0
	sta clr2+1
	
	jsr calc_faded_colour

	// poke $d100+k, flip_var
	phz
	plx
	sta .palette_loc,x
}

!macro fade_clr1_to_clr2_step .bk4ptr1, .bk4ptr2, .palette_loc {
	// flip_var = curr_red&(k)
	+set1ptr_from_4ptr .bk4ptr1
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr1 = flip_var
	sta clr1+1
	lda #$00
	sta clr1
	
	// flip_var = default_red&(k)
	+set1ptr_from_4ptr .bk4ptr2
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr2 = flip_var
	sta clr2+1
	lda #$00
	sta clr2
	
	jsr calc_faded_colour

	// poke $d100+k, flip_var
	phz
	plx
	sta .palette_loc,x
}

// ROUTINES
// ========
* = $7e00
	jmp fade_colours_to_white
	jmp fade_between_colours
	jmp cycle_alt_palette


//---------------------
fade_colours_to_white: // (a=fadeval)
//---------------------
	sei
	// store a into fadeval
	sta fadeval+1
	lda #$00
	sta fadeval

	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// INPUT: fadeval=0 to 16
	// tempval = fadeval / 16
	+copy16 fadeval, tempval
	+lsr16_by tempval, 4

	//for k = 0 to 31
	ldz #$00

-		+fade_clr1_to_white_step DEFAULT_RED, $d100
		+fade_clr1_to_white_step DEFAULT_GREEN, $d200
		+fade_clr1_to_white_step DEFAULT_BLUE, $d300

	//next k
	inz
	cpz #32
	lbne -

	// return
	cli
	rts


//---------------------
fade_between_colours: // (a=fadeval)
//---------------------
	sei
	// store a into fadeval
	sta fadeval+1
	lda #$00
	sta fadeval

	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// INPUT: fadeval=0 to 16
	// tempval = fadeval / 16
	+copy16 fadeval, tempval
	+lsr16_by tempval, 4

	//for k = 0 to 31
	ldz #$00

kloop:
		+fade_clr1_to_clr2_step CURR_RED, DEFAULT_RED, $d100
red:
		+fade_clr1_to_clr2_step CURR_GREEN, DEFAULT_GREEN, $d200
green:
		+fade_clr1_to_clr2_step CURR_BLUE, DEFAULT_BLUE, $d300
blue:

	//next k
	inz
	cpz #32
	lbne kloop

	// return
	cli
	rts


//---------------
cycle_alt_palette:
//---------------
	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// tempr = peek($d100+12)
	lda $d100+12
	sta tempr
	// tempg = peek($d200+12)
	lda $d200+12
	sta tempg
	// tempb = peek($d300+12)
	lda $d300+12
	sta tempb

	// for k = 12 to 30
	ldx #12
		// poke $d100+k, peek($d100+k+1)
-		lda $d101,x
		sta $d100,x
		// poke $d200+k, peek($d200+k+1)
		lda $d201,x
		sta $d200,x
		// poke $d300+k, peek($d300+k+1)
		lda $d301,x
		sta $d300,x
	// next k
	inx
	cpx #31
	bne -

	// poke $d100+31, tempr
	lda tempr
	sta $d100+31
	// poke $d200+31, tempg
	lda tempg
	sta $d200+31
	// poke $d300+31, tempb
	lda tempb
	sta $d300+31
	
	// ----------------------------

do_curr:
	ldz #12
	// tempr = curr_red&(12)
	+set1ptr_from_4ptr CURR_RED
	lda [ONEPTR],z
	sta tempr
	// tempg = curr_green&(12)
	+set1ptr_from_4ptr CURR_GREEN
	lda [ONEPTR],z
	sta tempg
	// tempb = curr_blue&(12)
	+set1ptr_from_4ptr CURR_BLUE
	lda [ONEPTR],z
	sta tempb

	// for k = 12 to 30
	ldz #12
		// curr_red&(k) = curr_red&(k+1)
-		+set1ptr_from_4ptr CURR_RED
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// curr_green&(k) = curr_green&(k+1)
		+set1ptr_from_4ptr CURR_GREEN
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// curr_blue&(k) = curr_blue&(k+1)
		+set1ptr_from_4ptr CURR_BLUE
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
	// next k
	inz
	cpz #31
	bne -

	ldz #31
	// curr_red&(31) = tempr
	+set1ptr_from_4ptr CURR_RED
	lda tempr
	sta [ONEPTR],z
	// curr_green&(31) = tempg
	+set1ptr_from_4ptr CURR_GREEN
	lda tempg
	sta [ONEPTR],z
	// curr_blue&(31) = tempb
	+set1ptr_from_4ptr CURR_BLUE
	lda tempb
	sta [ONEPTR],z
	
	// ----------------------------

do_default:
	ldz #12
	// tempr = default_red&(12)
	+set1ptr_from_4ptr DEFAULT_RED
	lda [ONEPTR],z
	sta tempr
	// tempg = default_green&(12)
	+set1ptr_from_4ptr DEFAULT_GREEN
	lda [ONEPTR],z
	sta tempg
	// tempb = default_blue&(12)
	+set1ptr_from_4ptr DEFAULT_BLUE
	lda [ONEPTR],z
	sta tempb

	// for k = 12 to 30
	ldz #12
		// default_red&(k) = default_red&(k+1)
-		+set1ptr_from_4ptr DEFAULT_RED
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// default_green&(k) = default_green&(k+1)
		+set1ptr_from_4ptr DEFAULT_GREEN
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// default_blue&(k) = default_blue&(k+1)
		+set1ptr_from_4ptr DEFAULT_BLUE
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
	// next k
	inz
	cpz #31
	bne -

	ldz #31
	// default_red&(31) = tempr
	+set1ptr_from_4ptr DEFAULT_RED
	lda tempr
	sta [ONEPTR],z
	// default_green&(31) = tempg
	+set1ptr_from_4ptr DEFAULT_GREEN
	lda tempg
	sta [ONEPTR],z
	// default_blue&(31) = tempb
	+set1ptr_from_4ptr DEFAULT_BLUE
	lda tempb
	sta [ONEPTR],z

	//return
	rts


flip_nibble:
// --------
	clc
	tax
	and #$0f
	asl
	asl
	asl
	asl
	sta tmp

	txa
	and #$f0
	lsr
	lsr
	lsr
	lsr

	ora tmp
	rts


calc_faded_colour:
//----------------
	// flip_var = clr1 + (clr2 - clr1) * tempval
	lda clr2+1
	cmp clr1+1
	bcc +		// clr1 > clr2?

	+subtract16 clr2, clr1, tmpw
	+multiply16 tmpw, tempval, tmpw
	+add16 clr1, tmpw, tmpw
	jmp ++

+	+subtract16 clr1, clr2, tmpw
	+multiply16 tmpw, tempval, tmpw
	+subtract16 clr1, tmpw, tmpw

++
	// gosub flip_nibble
	lda tmpw+1
	jsr flip_nibble
	
	rts




// VARIABLES
// ---------
fadeval:	!word $00
tempval:	!word $00
clr1:		!word $00
clr2:		!word $00
tmp:		!byte $00
tmpw:		!word $00
tempr:		!byte $00
tempg:		!byte $00
tempb:		!byte $00
