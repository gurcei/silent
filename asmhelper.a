!to "asmhelper.prg", cbm

// DEFINES
// =======
ZEROPTR = $1c
ONEPTR = $29
FOURPTR = $18
CLRPTR = $20


// BANK4 VAR INTERFACE
// ===================
DEFAULT_RED = $20
DEFAULT_GREEN = $22
DEFAULT_BLUE = $24
CURR_RED = $26
CURR_GREEN = $28
CURR_BLUE = $2a
DATA_ADDR = $2c	// src of dma
CDATA_ADDR = $2e
SCRADDR = $30	// dest of dma
CLRADDR = $32
INC_FRM = $34
STARX = $36
STARVX = $38

MULTINA = $d770
MULTINB = $d774
MULTOUT = $d778


// MACROS
// ======
!macro copy16 .dest, .src {
	lda .src
	sta .dest
	lda .src+1
	sta .dest+1
}

!macro lsr16 .loc {
	clc
	lda .loc+1
	ror
	sta .loc+1
	lda .loc
	ror
	sta .loc
}

!macro lsr16_by .loc, .cnt {
	ldx #.cnt
	cpx #$00
	beq +
-	+lsr16 .loc
	dex
	bne -
+ 
}

!macro copy_basic_int .bk4loc, .out {
	+set0ptr_from_4ptr .bk4loc
	ldz #$00
	lda [ZEROPTR],z
	sta .out+1
	inz
	lda [ZEROPTR],z
	sta .out
}

!macro set0ptr_from_4ptr .b4offs {
	phz
	ldz #.b4offs
	lda [FOURPTR],z
	sta ZEROPTR
	inz
	lda [FOURPTR],z
	sta ZEROPTR+1
	plz
}

!macro set1ptr_from_4ptr .b4offs {
	phz
	ldz #.b4offs
	lda [FOURPTR],z
	sta ONEPTR
	inz
	lda [FOURPTR],z
	sta ONEPTR+1
	plz
}

!macro add16 .in1, .in2, .out {
	clc
	lda .in1
	adc .in2
	sta .out
	lda .in1+1
	adc .in2+1
	sta .out+1
	clc
}

!macro subtract16 .in1, .in2, .out {
	sec
	lda .in1
	sbc .in2
	sta .out
	lda .in1+1
	sbc .in2+1
	sta .out+1
	clc
}

!macro multiply16 .in1, .in2, .out {
	phz
	ldz #$00
	ldy #$00
	ldx .in1+1
	lda .in1
	stq MULTINA

	ldx .in2+1
	lda .in2
	stq MULTINB

	ldq MULTOUT
	stx .out
	sty .out+1
	plz
}

!macro multiply8 .in1, .in2, .out {
	phz
	ldz #$00
	ldy #$00
	ldx #$00
	lda .in1
	stq MULTINA

	lda .in2
	stq MULTINB

	ldq MULTOUT
	stx .out+1
	sta .out
	plz
}

!macro wpoke_b4 .offs, .intvar {
	ldz#.offs
	lda .intvar
	sta [FOURPTR],z
	inz
	lda .intvar+1
	sta [FOURPTR],z
}

!macro poke_b4 .offs, .bytevar {
	ldz#.offs
	lda .bytevar
	sta [FOURPTR],z
}

!macro poke_b4_val .offs, .byte {
	ldz#.offs
	lda#.byte
	sta [FOURPTR],z
}

!macro fade_clr1_to_white_step .bk4ptr, .palette_loc {
	// flip_var = default_red&(k)
	+set1ptr_from_4ptr .bk4ptr
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr1 = flip_var
	sta clr1+1
	lda #$00
	sta clr1
	
	// clr2 = $f0   ' (white)
	sta clr2
	lda #$f0
	sta clr2+1
	
	jsr calc_faded_colour

	// poke $d100+k, flip_var
	phz
	plx
	sta .palette_loc,x
}

!macro fade_clr1_to_black_step .bk4ptr, .palette_loc {
	// flip_var = default_red&(k)
	+set1ptr_from_4ptr .bk4ptr
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr1 = flip_var
	sta clr1+1
	lda #$00
	sta clr1
	
	// clr2 = $00   ' (black)
	sta clr2
	sta clr2+1
	
	jsr calc_faded_colour

	// poke $d100+k, flip_var
	phz
	plx
	sta .palette_loc,x
}

!macro fade_clr1_to_clr2_step .bk4ptr1, .bk4ptr2, .palette_loc {
	// flip_var = curr_red&(k)
	+set1ptr_from_4ptr .bk4ptr1
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr1 = flip_var
	sta clr1+1
	lda #$00
	sta clr1
	
	// flip_var = default_red&(k)
	+set1ptr_from_4ptr .bk4ptr2
	lda [ONEPTR],z

	// gosub flip_nibble
	jsr flip_nibble

	// clr2 = flip_var
	sta clr2+1
	lda #$00
	sta clr2
	
	jsr calc_faded_colour

	// poke $d100+k, flip_var
	phz
	plx
	sta .palette_loc,x
}

// ROUTINES
// ========
* = $7e00
	jmp fade_colours_to_white
	jmp fade_between_colours
	jmp cycle_alt_palette
	jmp draw_petscii_frame
	jmp fade_colours_to_black
	jmp iter_starfield


//---------------------
fade_colours_to_white: // (a=fadeval)
//---------------------
	sei
	// store a into fadeval
	sta fadeval+1
	lda #$00
	sta fadeval

	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// INPUT: fadeval=0 to 128
	// tempval = fadeval / 128
	+copy16 tempval, fadeval
	+lsr16_by tempval, 7

	//for k = 0 to 31
	ldz #$00

-		+fade_clr1_to_white_step DEFAULT_RED, $d100
		+fade_clr1_to_white_step DEFAULT_GREEN, $d200
		+fade_clr1_to_white_step DEFAULT_BLUE, $d300

	//next k
	inz
	cpz #32
	lbne -

	// return
	cli
	rts


//---------------------
fade_between_colours: // (a=fadeval)
//---------------------
	sei
	// store a into fadeval
	sta fadeval+1
	lda #$00
	sta fadeval

	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// INPUT: fadeval=0 to 128
	// tempval = fadeval / 128
	+copy16 tempval, fadeval
	+lsr16_by tempval, 7

	//for k = 0 to 31
	ldz #$00

kloop:
		+fade_clr1_to_clr2_step CURR_RED, DEFAULT_RED, $d100
red:
		+fade_clr1_to_clr2_step CURR_GREEN, DEFAULT_GREEN, $d200
green:
		+fade_clr1_to_clr2_step CURR_BLUE, DEFAULT_BLUE, $d300
blue:

	//next k
	inz
	cpz #32
	lbne kloop

	// return
	cli
	rts


//---------------
cycle_alt_palette:
//---------------
	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// tempr = peek($d100+12)
	lda $d100+12
	sta tempr
	// tempg = peek($d200+12)
	lda $d200+12
	sta tempg
	// tempb = peek($d300+12)
	lda $d300+12
	sta tempb

	// for k = 12 to 30
	ldx #12
		// poke $d100+k, peek($d100+k+1)
-		lda $d101,x
		sta $d100,x
		// poke $d200+k, peek($d200+k+1)
		lda $d201,x
		sta $d200,x
		// poke $d300+k, peek($d300+k+1)
		lda $d301,x
		sta $d300,x
	// next k
	inx
	cpx #31
	bne -

	// poke $d100+31, tempr
	lda tempr
	sta $d100+31
	// poke $d200+31, tempg
	lda tempg
	sta $d200+31
	// poke $d300+31, tempb
	lda tempb
	sta $d300+31
	
	// ----------------------------

do_curr:
	ldz #12
	// tempr = curr_red&(12)
	+set1ptr_from_4ptr CURR_RED
	lda [ONEPTR],z
	sta tempr
	// tempg = curr_green&(12)
	+set1ptr_from_4ptr CURR_GREEN
	lda [ONEPTR],z
	sta tempg
	// tempb = curr_blue&(12)
	+set1ptr_from_4ptr CURR_BLUE
	lda [ONEPTR],z
	sta tempb

	// for k = 12 to 30
	ldz #12
		// curr_red&(k) = curr_red&(k+1)
-		+set1ptr_from_4ptr CURR_RED
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// curr_green&(k) = curr_green&(k+1)
		+set1ptr_from_4ptr CURR_GREEN
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// curr_blue&(k) = curr_blue&(k+1)
		+set1ptr_from_4ptr CURR_BLUE
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
	// next k
	inz
	cpz #31
	bne -

	ldz #31
	// curr_red&(31) = tempr
	+set1ptr_from_4ptr CURR_RED
	lda tempr
	sta [ONEPTR],z
	// curr_green&(31) = tempg
	+set1ptr_from_4ptr CURR_GREEN
	lda tempg
	sta [ONEPTR],z
	// curr_blue&(31) = tempb
	+set1ptr_from_4ptr CURR_BLUE
	lda tempb
	sta [ONEPTR],z
	
	// ----------------------------

do_default:
	ldz #12
	// tempr = default_red&(12)
	+set1ptr_from_4ptr DEFAULT_RED
	lda [ONEPTR],z
	sta tempr
	// tempg = default_green&(12)
	+set1ptr_from_4ptr DEFAULT_GREEN
	lda [ONEPTR],z
	sta tempg
	// tempb = default_blue&(12)
	+set1ptr_from_4ptr DEFAULT_BLUE
	lda [ONEPTR],z
	sta tempb

	// for k = 12 to 30
	ldz #12
		// default_red&(k) = default_red&(k+1)
-		+set1ptr_from_4ptr DEFAULT_RED
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// default_green&(k) = default_green&(k+1)
		+set1ptr_from_4ptr DEFAULT_GREEN
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
		// default_blue&(k) = default_blue&(k+1)
		+set1ptr_from_4ptr DEFAULT_BLUE
		inz
		lda [ONEPTR],z
		dez
		sta [ONEPTR],z
	// next k
	inz
	cpz #31
	bne -

	ldz #31
	// default_red&(31) = tempr
	+set1ptr_from_4ptr DEFAULT_RED
	lda tempr
	sta [ONEPTR],z
	// default_green&(31) = tempg
	+set1ptr_from_4ptr DEFAULT_GREEN
	lda tempg
	sta [ONEPTR],z
	// default_blue&(31) = tempb
	+set1ptr_from_4ptr DEFAULT_BLUE
	lda tempb
	sta [ONEPTR],z

	//return
	rts


//------
draw_petscii_frame: // (a = frmy, x = frmy1, y = frmw)
//------
// input: word data_addr (always bank 4)
// input: word cdata_addr (always bank 4)
// input: word scraddr (always bank 5)
// input: word clraddr (always bank 5)

	// save passed regs
	sta frmy+1
	lda #$00
	sta frmy

	stx frmy1+1
	sta frmy1

	sty frmw

	// prepare four pointer
	lda #$00
	sta ZEROPTR
	sta ZEROPTR+1
	sta ZEROPTR+2
	sta ZEROPTR+3

	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	sta CLRPTR
	sta CLRPTR+1
	lda #$f8
	sta CLRPTR+2
	lda #$0f
	sta CLRPTR+3

	+copy_basic_int DATA_ADDR, data_addr
	+copy_basic_int CDATA_ADDR, cdata_addr
	+copy_basic_int SCRADDR, scraddr
	+copy_basic_int CLRADDR, clraddr
	+copy_basic_int INC_FRM, inc_frm

	// for yy=frmy1 to frmy step -inc(frameidx)
	+copy16 yy, frmy1
	
foryyloop:
		//if scraddr < 0 then goto for_skip
		lda scraddr+1
		bpl +
		rts

		// if yy < frmy then yy = frmy
+               lda yy+1
		cmp frmy+1
		bmi force_yy // if hi(yy) < hi(frmy)
		bne +   // jump if hi(yy) > hi(frmy)

		lda yy
		cmp frmy
		bpl +

force_yy:
		+copy16 yy, frmy
		
		// ' draw chars
		// ' ----------
		// src_addr = data_addr + int(yy-frmy) * frmw
+ 		lda #$00
		sta tmpw+1
		sec
		lda yy+1
		sbc frmy+1
		sta tmpw	// tmpw = int(yy-frmy)

		+multiply8 tmpw, frmw, tmpw		// tmpw = frmw * tmpw
		+add16 data_addr, tmpw, src_addr	// src_addr = data_addr + tmpw

		// dest_addr = scraddr
		+copy16 dest_addr, scraddr

		// length = frmw
		// lda frmw
		// sta length   // skip this, just always use length of frmw

		// transp = 102
		lda #102
		sta transp

		// gosub transparent_dma
		jsr transparent_dma
		
		// src_addr = cdata_addr + int(yy-frmy) * frmw
		+add16 cdata_addr, tmpw, src_addr	// src_addr = cdata_addr + tmpw

		// dest_addr = clraddr
		+copy16 dest_addr, clraddr

		//length = frmw

		// transp = $ff
		lda #$ff
		sta transp

		// gosub transparent_dma
		jsr transparent_dma
		
		lda #80
		sta tmpw
		lda #$00
		sta tmpw+1
		// scraddr = scraddr - 80
		+subtract16 scraddr, tmpw, scraddr

		// clraddr = clraddr - 80
		+subtract16 clraddr, tmpw, clraddr

	// next yy
	// for yy=frmy1 to frmy step -inc(frameidx)
	// if yy == frmy1 then exit
	lda yy
	cmp frmy
	bne nextlp

	lda yy+1
	cmp frmy+1
	bne nextlp
	rts

nextlp:
	+subtract16 yy, inc_frm, yy

	jmp foryyloop
	
	// return
	rts


//---------------------
fade_colours_to_black: // (a=fadeval)
//---------------------
	sei
	// store a into fadeval
	sta fadeval+1
	lda #$00
	sta fadeval

	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	// INPUT: fadeval=0 to 128
	// tempval = fadeval / 128
	+copy16 tempval, fadeval
	+lsr16_by tempval, 7

	//for k = 0 to 31
	ldz #$00

-		+fade_clr1_to_black_step DEFAULT_RED, $d100
		+fade_clr1_to_black_step DEFAULT_GREEN, $d200
		+fade_clr1_to_black_step DEFAULT_BLUE, $d300

	//next k
	inz
	cpz #32
	lbne -

	// return
	cli
	rts


//------------
iter_starfield:
//------------
	// prepare four pointer
	lda #$00
	sta FOURPTR
	sta FOURPTR+1
	sta FOURPTR+3
	lda #$04
	sta FOURPTR+2

	+set1ptr_from_4ptr STARX
	ldz #$00

	+set0ptr_from_4ptr STARVX
	lda #$01	// switch it to a 1 pointer too, just for convenience
	sta ZEROPTR+2
	lda #$00
	sta ZEROPTR+3

	// for k = 0 to 20
	ldy #$00

		// starx(k) = mod(starx(k) - starvx(k) +80, 80)
-		sec
		inz
		lda [ONEPTR],z
		sbc [ZEROPTR],z
		sta [ONEPTR],z
		dez
		lda [ONEPTR],z
		sbc [ZEROPTR],z
		sta [ONEPTR],z

		bpl +		// check if subtraction was negative

		clc		// if negative, add 80
		adc #80
		sta [ONEPTR],z
		clc

+
		inz
		inz

	// next k
	iny
	cpy #21
	bne -

	rts

// ---------------------
// INTERNAL ASM ROUTINES
// ---------------------

transparent_dma:
//-------------
	// wpoke $40009, src_addr
	+wpoke_b4 $09, src_addr

	// wpoke $4000c, dest_addr
	+wpoke_b4 $0c, dest_addr

	// wpoke $40007, length
	+poke_b4 $07, frmw
	+poke_b4_val $08, $00

	// poke  $40004, transp
	+poke_b4 $04, transp

	// poke $d702, 4 ' dma list in bank 4
	lda #$04
	sta $d702

	// poke $d701, $00 ' dma list msb
	lda #$00
	sta $d701

	// poke $d705, $00 ' dma list lsb
	lda #$00
	sta $d705
	
	// return
	rts


flip_nibble:
// --------
	clc
	tax
	and #$0f
	asl
	asl
	asl
	asl
	sta tmp

	txa
	and #$f0
	lsr
	lsr
	lsr
	lsr

	ora tmp
	rts


calc_faded_colour:
//----------------
	// flip_var = clr1 + (clr2 - clr1) * tempval
	lda clr2+1
	cmp clr1+1
	bcc +		// clr1 > clr2?

	+subtract16 clr2, clr1, tmpw
	+multiply16 tmpw, tempval, tmpw
	+add16 clr1, tmpw, tmpw
	jmp ++

+	+subtract16 clr1, clr2, tmpw
	+multiply16 tmpw, tempval, tmpw
	+subtract16 clr1, tmpw, tmpw

++
	// gosub flip_nibble
	lda tmpw+1
	jsr flip_nibble
	
	rts




// VARIABLES
// ---------
fadeval:	!word $00
tempval:	!word $00
clr1:		!word $00
clr2:		!word $00
tmp:		!byte $00
tmpw:		!word $00
tempr:		!byte $00
tempg:		!byte $00
tempb:		!byte $00
data_addr:	!word $00
cdata_addr:	!word $00
scraddr:	!word $00
clraddr:	!word $00
inc_frm:	!word $00
frmy:		!word $00
frmy1:		!word $00
frmw:		!byte $00
yy:		!word $00
src_addr:	!word $00
dest_addr:	!word $00
transp:		!byte $00
starx:		!word $00
starvx:		!word $00

