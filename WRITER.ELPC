#output "writer"

'--------
.declares
'--------
#declare s$, pidx%, didx%, ldata&(12000), ptr, val&
#declare char_idx%(60)
#declare char_width%(60)
#declare char_cnt, max_width, txt_k
#declare x, y, a$, debug=0, z$
#declare xx, yy, chr
#declare lyr$(27), lyr_idx, max_len
#declare lyr_offs, lyr_t, offs, addr, scyy, zz

'----
.main
'----
  gosub init
  
  lyr_offs = 0
  ' xx=0:yy=0
  ' s$ = ",/#"
  ' gosub write_text

  ' xx=0:yy=15
  ' sleep .5
  ' print "{x93}";

  for lyr_idx = 0 to 27
    xx = offs + 65 : yy = 0
    zz = mod(lyr_idx, 4)
    if zz = 0 then yy = 0
    if zz = 1 then yy = 17
    if zz = 2 then yy = 33
    if zz = 3 then yy = 17
    s$ = lyr$(lyr_idx)
    gosub write_text
  next lyr_idx

  end


'----
.init
'----
  print chr$(27);"5"

  lyr$(0) = "In dreamland..."
  lyr$(1) = "grandeur..."
  lyr$(2) = "I held..."
  lyr$(3) = "mesmerised..."
  lyr$(4) = "Peace..."
  lyr$(5) = "Innocence..."
  lyr$(6) = "Breathed again..."

  lyr$(7) = "A mind's escape"
  lyr$(8) = "Leave walls of tears behind..."
  lyr$(9) = "Ethereal vision haunting still..."
  lyr$(10) = "The solitude left me blind..."

  lyr$(11) = "Beneath an open sky..."
  lyr$(12) = "Sibilant cries of youth dying..."
  lyr$(13) = "Enslave me with grief..."
  lyr$(14) = "A moonlit era..."
  lyr$(15) = "Oblivion's twilight kiss..."
  lyr$(16) = "Wishes in lament..."
  lyr$(17) = "Happiness in a broken vision..."
  lyr$(18) = "Utopia..."
  lyr$(19) = "Still unborn..."

  lyr$(20) = "Tormented echoes..."
  lyr$(21) = "of a fallen Eden..."
  lyr$(22) = "I longed for her beauty..."
  lyr$(23) = "Yet from dust..."
  lyr$(24) = "She returned..."
  lyr$(25) = "The dream..."
  lyr$(26) = "An enigma..."
  lyr$(27) = "Silent..."

  print "{x93}";

  xx = 0 : yy = 0
  ptr = $42000
  ' load 'abc.ln' font
  gosub load_font

  char_cnt = 0
  char_idx%(0) = 0
  char_width%(0) = 0
  max_width = 0

  txt_k = 0
  do while txt_k < didx%
    ' get x value
    val& = ldata&(txt_k)
    txt_k=txt_k+1

    if val& = $ff then begin
      ' keep an array of widths of each letter
      char_width%(char_cnt)=max_width

      ' print "char_width(";char_cnt;") = ";max_width
      ' get key z$

      max_width = 0
      char_cnt=char_cnt+1

      ' keep an array of indices to each drawn letter
      char_idx%(char_cnt) = txt_k
      'print "char_idx%(";char_cnt;")=";k
      'get key a$
    bend

    if val& = $ff then goto cont_loop

    val& = val& and $7f
    if val& > max_width then max_width = val&
    
    txt_k=txt_k+1  ' skip y value
    txt_k=txt_k+1  ' skip char 

.cont_loop
  loop

  return


'---------
.load_font
'---------
  dopen #2,("abc.ln"),r,u8

  do
    get #2, val&
    if st then exit
    ldata&(didx%) = val&
    didx% = didx% + 1
  loop

  dclose #2
  return


'----------
.write_text
'----------
  for txt_k = 1 to len(s$)
    chr = asc(mid$(s$, txt_k, 1))
    ' print "{x13}";chr$(27);"qchr=";chr;
    gosub petscii_to_screencode
    gosub screencode_to_idx
    ' print "fixed chr=";chr;

    if chr=100 then begin
      'xx=xx+7
      gosub scroll_canvas_right
      gosub scroll_canvas_right
      gosub scroll_canvas_right
      gosub scroll_canvas_right
      gosub scroll_canvas_right
      gosub scroll_canvas_right

    bend:else:begin
      gosub write_char
      xx = xx + char_width%(chr) + 1
    bend
    ' get key a$
  next txt_k
  return


'---------------------
.petscii_to_screencode
'---------------------
  ' Based on the table here:
  ' https://sta.c64.org/cbm64pettoscr.html
  if chr>=$00 and chr<=$1f then chr=chr or $80:return
  if chr>=$20 and chr<=$3f then return
  if chr>=$40 and chr<=$5f then chr=chr and $bf:return
  if chr>=$60 and chr<=$7f then chr=chr and $df:return
  if chr>=$80 and chr<=$9f then chr=chr or $40:return
  if chr>=$a0 and chr<=$bf then chr=chr and $bf:return
  if chr>=$c0 and chr<=$fe then chr=chr and $7f:return
  return


'-----------------
.screencode_to_idx
'-----------------
  if chr >= 65 and chr <= 90 then chr = chr - 65:return
  if chr = 46 then chr = 26:return ' full-stop
  if chr = 33 then chr = 27:return ' exclamation
  if chr = 44 then chr = 28:return ' comma (smiley)
  if chr = 47 then chr = 29:return ' forward slash (love heart)
  if chr = 35 then chr = 30:return ' # hash (dhufish)
  if chr >= 1 and chr <= 26 then chr = chr + 30:return
  if chr = 39 then chr = 57:return
  if chr = 32 then chr = 100:return
  return

'----------
.write_char
'----------
  ' iterate over chars in string
    ' draw current char at given x,y pos
    ' increment x,y location 

  pidx% = char_idx%(chr)

  do while pidx% < didx% and ldata&(pidx%) <> $ff

    ' cursor 0,49:print chr$(27);"qpidx=";pidx%;"[";ldata&(pidx%);ldata&(pidx%+1);ldata&(pidx%+2);

    val& = ldata&(pidx%) : pidx% = pidx% + 1

    x = val& and $7f

    if val& and $80 then print "{x12}"; : else print "{x92}";
    y = ldata&(pidx%) : pidx% = pidx% + 1
    a$ = chr$(ldata&(pidx%)) : pidx% = pidx% + 1

    cursor xx+x - offs, yy+y : gosub draw_char

    lyr_t = lyr_t + 1

    if mod(lyr_t, 3) = 0 then gosub scroll_canvas_right:xx=xx-1

    'print "{x13}{x11}";chr$(27);"q x,y,pidx,a$=";x;y;pidx%,asc(a$)
    'get key a$

    sleep .02
.pd_endloop
  loop

  return


'---------
.draw_char
'---------
  ' poke $40800 + x + y*80, asc(a$)
  ' poke $ff80000 + x + y*80, rcolor(1)
  print a$;
  return


'-------------------
.scroll_canvas_right
'-------------------
  lyr_offs = lyr_offs + 1
  addr = $40800

  addr = $40800

  for scyy = 0 to 49
    edma 0, 79, addr+1 + scyy*80, addr + scyy*80
    poke addr + 79 + scyy * 80, 32
  next scyy
  return
ÿ